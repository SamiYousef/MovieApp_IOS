//
//  ListMoviesViewController.swift
//  MovieApp
//
//  Created by Sami Youssef on 11/12/18.
//  Copyright (c) 2018 Sami Youssef. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListMoviesDisplayLogic: class {
    func displayMovieList(viewModel: ListMovies.FetchMovieList.ViewModel)
}

class ListMoviesViewController: UICollectionViewController, ListMoviesDisplayLogic {
    var interactor: ListMoviesBusinessLogic?
    var router: (NSObjectProtocol & ListMoviesRoutingLogic & ListMoviesDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    override init(collectionViewLayout layout: UICollectionViewLayout) {
        super.init(collectionViewLayout: layout)
        setup()
    }

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ListMoviesInteractor()
        let presenter = ListMoviesPresenter()
        let router = ListMoviesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.title = "MovieApp"
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()

        self.collectionView?.backgroundColor = .white
        self.collectionView?.register(MovieCell.self, forCellWithReuseIdentifier: .movieCellId)
        fetchMovieList()
    }

    // MARK: Do something

    private var movieList = [MovieObj]()

    //@IBOutlet weak var nameTextField: UITextField!

    private func fetchMovieList() {
        let request = ListMovies.FetchMovieList.Request()
        interactor?.fetchMovieList(request: request)
    }

    func displayMovieList(viewModel: ListMovies.FetchMovieList.ViewModel) {
        self.movieList = viewModel.movieLits
        self.collectionView?.reloadData()
    }
}

extension ListMoviesViewController {
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return movieList.count
    }

    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: .movieCellId, for: indexPath) as? MovieCell else { return UICollectionViewCell() }
        cell.movieItem = movieList[indexPath.row]
        return cell
    }

    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let detailController = MovieDetailController()
        detailController.movieItem = movieList[indexPath.row]
        self.navigationController?.pushViewController(detailController, animated: true)
    }
}

extension ListMoviesViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let movieCellWidth = self.view.frame.width / 3 - 8
        let movieCellHeight = (movieCellWidth * 16) / 9
        return CGSize(width: movieCellWidth, height: movieCellHeight)
    }
}

fileprivate extension String {
    static let movieCellId = "movieCellId"
}
